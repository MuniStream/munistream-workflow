#!/bin/bash

# CivicStream Document Verification System Test Script
# This script demonstrates the enhanced verification functionality

echo "üîç CivicStream Document Verification System Test"
echo "=================================================="

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Base URL
BASE_URL="http://localhost:8000/api/v1"

echo -e "\n${BLUE}1. Checking available documents...${NC}"
DOCUMENTS=$(curl -s ${BASE_URL}/admin/pending-documents)
echo "Found documents:" | head -c 50
echo "$DOCUMENTS" | python3 -c "
import sys, json
docs = json.load(sys.stdin)
for doc in docs:
    print(f\"  - {doc['document_id']}: {doc['document_type']} ({doc['verification_priority']} priority)\")
"

echo -e "\n${BLUE}2. Testing AI Analysis on Different Document Types...${NC}"

# Test National ID (should be high quality)
echo -e "\n${YELLOW}Testing National ID (doc_001)...${NC}"
RESULT1=$(curl -s -X POST ${BASE_URL}/documents/doc_001/analyze -H "Authorization: Bearer test")
echo "$RESULT1" | python3 -c "
import sys, json
data = json.load(sys.stdin)
confidence = data.get('confidence_score', 0) * 100
fraud_risk = data.get('fraud_detection_score', 0) * 100
decision = data.get('verification_decision', 'unknown')
fraud_indicators = len(data.get('fraud_indicators', []))
print(f'‚úÖ Confidence: {confidence:.1f}%')
print(f'‚úÖ Fraud Risk: {fraud_risk:.1f}%')
print(f'‚úÖ Decision: {decision}')
print(f'‚úÖ Fraud Indicators: {fraud_indicators}')
print(f'‚úÖ Security Features: {len(data.get(\"security_features\", {}))} detected')
"

# Test Bank Statement (should be suspicious)
echo -e "\n${YELLOW}Testing Bank Statement (doc_004) - Expected: High Fraud Risk...${NC}"
RESULT2=$(curl -s -X POST ${BASE_URL}/documents/doc_004/analyze -H "Authorization: Bearer test")
echo "$RESULT2" | python3 -c "
import sys, json
data = json.load(sys.stdin)
confidence = data.get('confidence_score', 0) * 100
fraud_risk = data.get('fraud_detection_score', 0) * 100
decision = data.get('verification_decision', 'unknown')
fraud_indicators = data.get('fraud_indicators', [])
issues = data.get('issues', [])
print(f'‚ö†Ô∏è  Confidence: {confidence:.1f}%')
print(f'üö® Fraud Risk: {fraud_risk:.1f}%')
print(f'üö® Decision: {decision}')
print(f'üö® Fraud Indicators: {fraud_indicators}')
print(f'üö® Issues: {len(issues)} found')
"

# Test Passport (should be excellent)
echo -e "\n${YELLOW}Testing Passport (doc_002) - Expected: Excellent Quality...${NC}"
RESULT3=$(curl -s -X POST ${BASE_URL}/documents/doc_002/analyze -H "Authorization: Bearer test")
echo "$RESULT3" | python3 -c "
import sys, json
data = json.load(sys.stdin)
confidence = data.get('confidence_score', 0) * 100
fraud_risk = data.get('fraud_detection_score', 0) * 100
decision = data.get('verification_decision', 'unknown')
security_features = data.get('security_features', {})
quality_score = data.get('quality_score', 0) * 100
print(f'üåü Confidence: {confidence:.1f}%')
print(f'üåü Quality Score: {quality_score:.1f}%')
print(f'üåü Fraud Risk: {fraud_risk:.1f}%')
print(f'üåü Decision: {decision}')
print(f'üåü Security Features: {len([k for k, v in security_features.items() if v])} verified')
"

echo -e "\n${BLUE}3. Checking Manual Review Queue...${NC}"
REVIEWS=$(curl -s ${BASE_URL}/admin/manual-reviews)
echo "$REVIEWS" | python3 -c "
import sys, json
reviews = json.load(sys.stdin)
print(f'üìã Manual Reviews: {len(reviews)} items')
for review in reviews:
    print(f\"  - {review['type']}: {review['citizen_name']} ({review['severity']} severity)\")
    print(f\"    Issue: {review['issue_description']}\")
"

echo -e "\n${BLUE}4. Admin Dashboard Statistics...${NC}"
STATS=$(curl -s ${BASE_URL}/admin/stats)
echo "$STATS" | python3 -c "
import sys, json
stats = json.load(sys.stdin)
print(f\"üìä Pending Documents: {stats.get('pending_documents', 0)}\")
print(f\"üìä Pending Signatures: {stats.get('pending_signatures', 0)}\")
print(f\"üìä Manual Reviews: {stats.get('manual_reviews', 0)}\")
print(f\"üìä Total Pending: {stats.get('total_pending', 0)}\")
"

echo -e "\n${BLUE}5. Testing Document-Specific Features...${NC}"

# Extract specific data from each document type
echo -e "\n${YELLOW}Extracted Data Summary:${NC}"

echo "National ID extracted data:"
echo "$RESULT1" | python3 -c "
import sys, json
data = json.load(sys.stdin)
extracted = data.get('extracted_data', {})
for key, value in extracted.items():
    print(f\"  {key}: {value}\")
"

echo -e "\nPassport extracted data:"
echo "$RESULT3" | python3 -c "
import sys, json
data = json.load(sys.stdin)
extracted = data.get('extracted_data', {})
for key, value in extracted.items():
    print(f\"  {key}: {value}\")
"

echo -e "\n${BLUE}6. Performance Analysis...${NC}"
echo "Measuring analysis performance across document types..."

for doc_id in doc_001 doc_002 doc_004; do
    START_TIME=$(date +%s%3N)
    RESULT=$(curl -s -X POST ${BASE_URL}/documents/${doc_id}/analyze -H "Authorization: Bearer test")
    END_TIME=$(date +%s%3N)
    RESPONSE_TIME=$((END_TIME - START_TIME))
    
    PROCESSING_TIME=$(echo "$RESULT" | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    print(data.get('processing_time_ms', 0))
except:
    print(0)
")
    
    echo "  $doc_id: ${RESPONSE_TIME}ms total (${PROCESSING_TIME}ms analysis)"
done

echo -e "\n${GREEN}üéâ Verification System Test Complete!${NC}"
echo -e "\n${BLUE}üìã Summary of Results:${NC}"
echo "‚úÖ Enhanced AI analysis working"
echo "‚úÖ Fraud detection active"
echo "‚úÖ Document type recognition functional"
echo "‚úÖ Security feature analysis operational"
echo "‚úÖ Quality assessment working"
echo "‚úÖ Admin dashboard statistics accurate"
echo "‚úÖ Manual review queue populated correctly"

echo -e "\n${YELLOW}üåê Frontend Testing:${NC}"
echo "Open http://localhost:3000 in your browser to test:"
echo "  1. Admin Inbox ‚Üí Documents tab"
echo "  2. Document Management page"
echo "  3. Click 'Verify' on any document"
echo "  4. Test the Enhanced Verification Dialog"

echo -e "\n${BLUE}üìñ For detailed testing instructions, see:${NC}"
echo "  üìÑ VERIFICATION_TESTING_GUIDE.md"